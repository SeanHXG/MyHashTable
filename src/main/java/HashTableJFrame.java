/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Sean
 */
import javax.swing.table.*;
import java.util.*;
import java.awt.Color;
import java.io.*;
public class HashTableJFrame extends javax.swing.JFrame {
    MyHashTable empTable = new MyHashTable(10);EmployeeInfo removedEmployee;
    FTE someFTE;
    PTE somePTE;
    FTE removedFTE;
    PTE removedPTE;
    boolean addingEmp = false;
    Color background = new Color(214, 217, 223);
    String saveFileName = "MyHashTable/saveMe.txt";
    /**
     * Creates new form HashTableJFrame
     */
    public HashTableJFrame() {
        initComponents();
        empSearchInvalidText.setForeground(background);
        empNumWarning.setForeground(background);
        fNWarning.setForeground(background);
        lNWarning.setForeground(background);
        genderWarning.setForeground(background);
        wLWarning.setForeground(background);
        dRWarning.setForeground(background);
        wSWarning.setForeground(background);
        hWWarning.setForeground(background);
        hpWWarning.setForeground(background);
        wpYWarning.setForeground(background);
        ySWarning.setForeground(background);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editGenderButtonGroup = new javax.swing.ButtonGroup();
        workStatusButtonGroup = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        mainTable = new javax.swing.JTable();
        empSearchInvalidText = new javax.swing.JLabel();
        loadButton = new javax.swing.JButton();
        empSearchBox = new javax.swing.JTextField();
        empSearchButton = new javax.swing.JButton();
        addEmpButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        editBox = new javax.swing.JPanel();
        editBoxTitle = new javax.swing.JLabel();
        editEmpNumLabel = new javax.swing.JLabel();
        editEmpNumInput = new javax.swing.JTextField();
        editFNLabel = new javax.swing.JLabel();
        editFNInput = new javax.swing.JTextField();
        editLNLabel = new javax.swing.JLabel();
        editLNInput = new javax.swing.JTextField();
        editGenderLabel = new javax.swing.JLabel();
        editGenderMButton = new javax.swing.JRadioButton();
        editGenderFButton = new javax.swing.JRadioButton();
        editGenderOtherButton = new javax.swing.JRadioButton();
        editWLLabel = new javax.swing.JLabel();
        editWLDropDown = new javax.swing.JComboBox<>();
        editDRLabel = new javax.swing.JLabel();
        editDRInput = new javax.swing.JTextField();
        editPTButton = new javax.swing.JRadioButton();
        editFTButton = new javax.swing.JRadioButton();
        editHWLabel = new javax.swing.JLabel();
        editHWInput = new javax.swing.JTextField();
        editHpWLabel = new javax.swing.JLabel();
        editHpWInput = new javax.swing.JTextField();
        editWpYLabel = new javax.swing.JLabel();
        editWpYInput = new javax.swing.JTextField();
        editYSLabel = new javax.swing.JLabel();
        editYSInput = new javax.swing.JTextField();
        grossIncLabel = new javax.swing.JLabel();
        grossIncDisplay = new javax.swing.JTextField();
        netIncLabel = new javax.swing.JLabel();
        netIncDisplay = new javax.swing.JTextField();
        empNumWarning = new javax.swing.JLabel();
        fNWarning = new javax.swing.JLabel();
        lNWarning = new javax.swing.JLabel();
        genderWarning = new javax.swing.JLabel();
        wLWarning = new javax.swing.JLabel();
        dRWarning = new javax.swing.JLabel();
        wSWarning = new javax.swing.JLabel();
        hWWarning = new javax.swing.JLabel();
        hpWWarning = new javax.swing.JLabel();
        wpYWarning = new javax.swing.JLabel();
        ySWarning = new javax.swing.JLabel();
        deleteEmpButton = new javax.swing.JButton();
        saveChangesButton = new javax.swing.JButton();
        resetChangesButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee #", "First Name", "Last Name", "Working Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        mainTable.setGridColor(new java.awt.Color(99, 99, 99));
        mainTable.getTableHeader().setReorderingAllowed(false);
        mainTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mainTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(mainTable);
        if (mainTable.getColumnModel().getColumnCount() > 0) {
            mainTable.getColumnModel().getColumn(0).setResizable(false);
            mainTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            mainTable.getColumnModel().getColumn(1).setResizable(false);
            mainTable.getColumnModel().getColumn(2).setResizable(false);
            mainTable.getColumnModel().getColumn(3).setResizable(false);
        }

        empSearchInvalidText.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        empSearchInvalidText.setForeground(new java.awt.Color(255, 0, 0));
        empSearchInvalidText.setText("Please enter a valid employee number.");

        loadButton.setText("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        empSearchBox.setText("Search by Employee Number...");
        empSearchBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                empSearchBoxFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                empSearchBoxFocusLost(evt);
            }
        });

        empSearchButton.setText("Search");
        empSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                empSearchButtonActionPerformed(evt);
            }
        });

        addEmpButton.setText("Add new Employee");
        addEmpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEmpButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        editBox.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        editBoxTitle.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        editBoxTitle.setText("Employee Data");

        editEmpNumLabel.setText("Employee #");
        editEmpNumLabel.setEnabled(false);

        editEmpNumInput.setEnabled(false);

        editFNLabel.setText("First Name");
        editFNLabel.setEnabled(false);

        editFNInput.setEnabled(false);

        editLNLabel.setText("Last Name");
        editLNLabel.setEnabled(false);

        editLNInput.setEnabled(false);

        editGenderLabel.setText("Gender");
        editGenderLabel.setEnabled(false);

        editGenderButtonGroup.add(editGenderMButton);
        editGenderMButton.setText("M");
        editGenderMButton.setEnabled(false);

        editGenderButtonGroup.add(editGenderFButton);
        editGenderFButton.setText("F");
        editGenderFButton.setEnabled(false);

        editGenderButtonGroup.add(editGenderOtherButton);
        editGenderOtherButton.setText("Other");
        editGenderOtherButton.setEnabled(false);

        editWLLabel.setText("Working Location");
        editWLLabel.setEnabled(false);

        editWLDropDown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "China", "France", "Space" }));
        editWLDropDown.setEnabled(false);

        editDRLabel.setText("Deductions Rate");
        editDRLabel.setEnabled(false);

        editDRInput.setEnabled(false);

        workStatusButtonGroup.add(editPTButton);
        editPTButton.setText("Part Time");
        editPTButton.setEnabled(false);
        editPTButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPTButtonActionPerformed(evt);
            }
        });

        workStatusButtonGroup.add(editFTButton);
        editFTButton.setText("Full Time");
        editFTButton.setEnabled(false);
        editFTButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editFTButtonActionPerformed(evt);
            }
        });

        editHWLabel.setText("Hourly Wage");
        editHWLabel.setEnabled(false);

        editHWInput.setEnabled(false);

        editHpWLabel.setText("Hours per Week");
        editHpWLabel.setEnabled(false);

        editHpWInput.setEnabled(false);

        editWpYLabel.setText("Weeks per Year");
        editWpYLabel.setEnabled(false);

        editWpYInput.setEnabled(false);

        editYSLabel.setText("Yearly Salary");
        editYSLabel.setEnabled(false);

        editYSInput.setEnabled(false);

        grossIncLabel.setText("Gross Income");
        grossIncLabel.setEnabled(false);

        grossIncDisplay.setEditable(false);
        grossIncDisplay.setEnabled(false);

        netIncLabel.setText("Net Income");
        netIncLabel.setEnabled(false);

        netIncDisplay.setEditable(false);
        netIncDisplay.setEnabled(false);

        empNumWarning.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        empNumWarning.setForeground(new java.awt.Color(255, 0, 0));
        empNumWarning.setText("!");

        fNWarning.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        fNWarning.setForeground(new java.awt.Color(255, 0, 0));
        fNWarning.setText("!");

        lNWarning.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lNWarning.setForeground(new java.awt.Color(255, 0, 0));
        lNWarning.setText("!");

        genderWarning.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        genderWarning.setForeground(new java.awt.Color(255, 0, 0));
        genderWarning.setText("!");

        wLWarning.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        wLWarning.setForeground(new java.awt.Color(255, 0, 0));
        wLWarning.setText("!");

        dRWarning.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        dRWarning.setForeground(new java.awt.Color(255, 0, 0));
        dRWarning.setText("!");

        wSWarning.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        wSWarning.setForeground(new java.awt.Color(255, 0, 0));
        wSWarning.setText("!");

        hWWarning.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        hWWarning.setForeground(new java.awt.Color(255, 0, 0));
        hWWarning.setText("!");

        hpWWarning.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        hpWWarning.setForeground(new java.awt.Color(255, 0, 0));
        hpWWarning.setText("!");

        wpYWarning.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        wpYWarning.setForeground(new java.awt.Color(255, 0, 0));
        wpYWarning.setText("!");

        ySWarning.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ySWarning.setForeground(new java.awt.Color(255, 0, 0));
        ySWarning.setText("!");

        javax.swing.GroupLayout editBoxLayout = new javax.swing.GroupLayout(editBox);
        editBox.setLayout(editBoxLayout);
        editBoxLayout.setHorizontalGroup(
            editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(editBoxLayout.createSequentialGroup()
                        .addGroup(editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(editBoxLayout.createSequentialGroup()
                                .addComponent(editGenderLabel)
                                .addGap(18, 18, 18)
                                .addComponent(genderWarning, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(editLNLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                        .addComponent(editGenderMButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editGenderFButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editGenderOtherButton))
                    .addGroup(editBoxLayout.createSequentialGroup()
                        .addGroup(editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editWLLabel)
                            .addComponent(editDRLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dRWarning, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(wLWarning, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(editDRInput, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editWLDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(editBoxLayout.createSequentialGroup()
                        .addGroup(editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(grossIncLabel)
                            .addComponent(netIncLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(grossIncDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(netIncDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editBoxLayout.createSequentialGroup()
                        .addGroup(editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editHpWLabel)
                            .addComponent(editWpYLabel)
                            .addComponent(editHWLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(editBoxLayout.createSequentialGroup()
                                .addComponent(hpWWarning, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(3, 3, 3)
                                .addComponent(editHpWInput, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editBoxLayout.createSequentialGroup()
                                .addComponent(hWWarning)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editHWInput, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editBoxLayout.createSequentialGroup()
                        .addGroup(editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editEmpNumLabel)
                            .addComponent(editFNLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editBoxLayout.createSequentialGroup()
                                .addComponent(fNWarning, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editFNInput, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editBoxLayout.createSequentialGroup()
                                .addComponent(empNumWarning, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(editEmpNumInput, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editBoxLayout.createSequentialGroup()
                                .addComponent(lNWarning, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(editLNInput, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editBoxLayout.createSequentialGroup()
                        .addGroup(editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ySWarning, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(wpYWarning))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(editYSInput, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editWpYInput, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(editBoxLayout.createSequentialGroup()
                        .addGroup(editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editYSLabel)
                            .addGroup(editBoxLayout.createSequentialGroup()
                                .addComponent(wSWarning, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editPTButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editFTButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editBoxLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(editBoxTitle)
                .addGap(49, 49, 49))
        );
        editBoxLayout.setVerticalGroup(
            editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editBoxLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(editBoxTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editEmpNumLabel)
                    .addComponent(editEmpNumInput, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(empNumWarning))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editFNLabel)
                    .addComponent(editFNInput, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fNWarning))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editLNLabel)
                    .addComponent(editLNInput, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lNWarning))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editGenderOtherButton, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(editGenderLabel)
                        .addComponent(editGenderMButton, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(editGenderFButton, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(genderWarning)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editWLDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editWLLabel)
                    .addComponent(wLWarning))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editDRLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editDRInput, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dRWarning))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editPTButton)
                    .addComponent(wSWarning)
                    .addComponent(editFTButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editHWInput, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editHWLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(hWWarning))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editHpWLabel)
                    .addComponent(editHpWInput, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hpWWarning))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editWpYLabel)
                    .addComponent(editWpYInput, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wpYWarning))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editYSLabel)
                    .addComponent(editYSInput, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ySWarning))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(grossIncDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(grossIncLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(netIncDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(netIncLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        deleteEmpButton.setText("Delete");
        deleteEmpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEmpButtonActionPerformed(evt);
            }
        });

        saveChangesButton.setText("Edit");
        saveChangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveChangesButtonActionPerformed(evt);
            }
        });

        resetChangesButton.setText("Reset");
        resetChangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetChangesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(editBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(saveChangesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(resetChangesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteEmpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addEmpButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(empSearchInvalidText, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(empSearchBox)
                                    .addGap(31, 31, 31)
                                    .addComponent(empSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 5, Short.MAX_VALUE)))
                .addGap(6, 6, 6))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(empSearchInvalidText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(empSearchBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(empSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(76, 76, 76)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(saveChangesButton)
                            .addComponent(addEmpButton)
                            .addComponent(resetChangesButton)
                            .addComponent(deleteEmpButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(saveButton)
                            .addComponent(loadButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addEmpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEmpButtonActionPerformed
empSearchInvalidText.setForeground(background);
DefaultTableModel mainTableModel = (DefaultTableModel) mainTable.getModel();
mainTableModel.setRowCount(mainTableModel.getRowCount()+1);

mainTable.setRowSelectionInterval(mainTable.getRowCount()-1, mainTable.getRowCount()-1);

editEmpNumInput.setText("");
editFNInput.setText("");
editLNInput.setText("");
editGenderButtonGroup.clearSelection();
editWLDropDown.setSelectedIndex(0);
editDRInput.setText("");
workStatusButtonGroup.clearSelection();
editHWInput.setText("");
editHpWInput.setText("");
editWpYInput.setText("");
editYSInput.setText("");
grossIncDisplay.setText("");
netIncDisplay.setText("");

editBox.setEnabled(true);
editEmpNumLabel.setEnabled(true);
editEmpNumInput.setEnabled(true);
editFNLabel.setEnabled(true);
editFNInput.setEnabled(true);
editLNLabel.setEnabled(true);
editLNInput.setEnabled(true);
editGenderLabel.setEnabled(true);
editGenderMButton.setEnabled(true);
editGenderFButton.setEnabled(true);
editGenderOtherButton.setEnabled(true);
editWLLabel.setEnabled(true);
editWLDropDown.setEnabled(true);
editDRLabel.setEnabled(true);
editDRInput.setEnabled(true);
editPTButton.setEnabled(true);
editFTButton.setEnabled(true);

saveButton.setEnabled(false);
loadButton.setEnabled(false);
empSearchBox.setEnabled(false);
empSearchButton.setEnabled(false);
mainTable.setEnabled(false);
addEmpButton.setEnabled(false);
editHWInput.setEnabled(false);
editHpWInput.setEnabled(false);
editWpYInput.setEnabled(false);
editYSInput.setEnabled(false);
grossIncDisplay.setEnabled(false);
netIncDisplay.setEnabled(false);

addingEmp = true;
    }//GEN-LAST:event_addEmpButtonActionPerformed

    private void empSearchBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_empSearchBoxFocusLost
        if(empSearchBox.getText().equals("")){
        empSearchBox.setText("Search by Employee Number...");        
        }
    }//GEN-LAST:event_empSearchBoxFocusLost

    private void empSearchBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_empSearchBoxFocusGained
        empSearchBox.setText("");
    }//GEN-LAST:event_empSearchBoxFocusGained

    private void editPTButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPTButtonActionPerformed
grossIncDisplay.setText("");
netIncDisplay.setText("");

editYSLabel.setEnabled(false);
editYSInput.setEnabled(false);
editHWLabel.setEnabled(true);
editHWInput.setEnabled(true);
editHpWLabel.setEnabled(true);
editHpWInput.setEnabled(true);
editWpYLabel.setEnabled(true);
editWpYInput.setEnabled(true);
if (grossIncLabel.isEnabled() == false){
    grossIncLabel.setEnabled(true);
    grossIncDisplay.setEnabled(true);
    netIncLabel.setEnabled(true);
    netIncDisplay.setEnabled(true);
}
    }//GEN-LAST:event_editPTButtonActionPerformed

    private void editFTButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editFTButtonActionPerformed
grossIncDisplay.setText("");
netIncDisplay.setText("");

editHWLabel.setEnabled(false);
editHWInput.setEnabled(false);
editHpWLabel.setEnabled(false);
editHpWInput.setEnabled(false);
editWpYLabel.setEnabled(false);
editWpYInput.setEnabled(false);
editYSLabel.setEnabled(true);
editYSInput.setEnabled(true);
if (grossIncDisplay.isEnabled() == false){
    grossIncLabel.setEnabled(true);
    grossIncDisplay.setEnabled(true);
    netIncLabel.setEnabled(true);
    netIncDisplay.setEnabled(true);
}
    }//GEN-LAST:event_editFTButtonActionPerformed

    private void mainTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainTableMouseClicked
empSearchInvalidText.setForeground(background);

editBox.setEnabled(true);
editEmpNumLabel.setEnabled(true);
editEmpNumInput.setEnabled(true);
editFNLabel.setEnabled(true);
editFNInput.setEnabled(true);
editLNLabel.setEnabled(true);
editLNInput.setEnabled(true);
editGenderLabel.setEnabled(true);
editGenderMButton.setEnabled(true);
editGenderFButton.setEnabled(true);
editGenderOtherButton.setEnabled(true);
editWLLabel.setEnabled(true);
editWLDropDown.setEnabled(true);
editDRLabel.setEnabled(true);
editDRInput.setEnabled(true);
editPTButton.setEnabled(true);
editFTButton.setEnabled(true);


int selectedEmpRow = mainTable.getSelectedRow();
int selectedEmpNum = -1;
EmployeeInfo tempEmp = null;

if (mainTable.getValueAt(selectedEmpRow, 0) != null){
selectedEmpNum = Integer.valueOf(String.valueOf(mainTable.getValueAt(selectedEmpRow, 0)));
tempEmp = empTable.getFromTable(selectedEmpNum);
}

if (tempEmp != null){
    editEmpNumInput.setText(String.valueOf(tempEmp.getEmpNumber()));
    editFNInput.setText(tempEmp.getFirstName());
    editLNInput.setText(tempEmp.getLastName());
    int tempEmpGender = tempEmp.getGender();
    if (tempEmpGender == 0){
        editGenderMButton.setSelected(true);
    }
    else{
        if (tempEmpGender == 1){
            editGenderFButton.setSelected(true);
        }
        else{
            editGenderOtherButton.setSelected(true);
        }
    }
    editWLDropDown.setSelectedIndex(tempEmp.getWorkLocation());
    editDRInput.setText(String.valueOf(tempEmp.getDeductionsRate()));

    if (tempEmp instanceof FTE){
        editFTButton.setSelected(true);

        editHWInput.setText("");
        editHpWInput.setText("");
        editWpYInput.setText("");
        editYSInput.setText(String.valueOf(((FTE)tempEmp).getYearlySalary()));
        grossIncDisplay.setText(String.valueOf(((FTE)tempEmp).calcAnnualGrossIncome()));
        netIncDisplay.setText(String.valueOf(Math.round(((FTE)tempEmp).calcAnnualNetIncome() * 100.0 ) / 100.0));

        editHWLabel.setEnabled(false);
        editHWInput.setEnabled(false);
        editHpWLabel.setEnabled(false);
        editHpWInput.setEnabled(false);
        editWpYLabel.setEnabled(false);
        editWpYInput.setEnabled(false);
        editYSLabel.setEnabled(true);
        editYSInput.setEnabled(true);
        if (grossIncDisplay.isEnabled() == false){
            grossIncLabel.setEnabled(true);
            grossIncDisplay.setEnabled(true);
            netIncLabel.setEnabled(true);
            netIncDisplay.setEnabled(true);
    }
        }
    else if (tempEmp instanceof PTE){
        editPTButton.setSelected(true);

        editYSInput.setText("");
        editHWInput.setText(String.valueOf(((PTE)tempEmp).getHourlyWage()));
        editHpWInput.setText(String.valueOf(((PTE)tempEmp).getHoursPerWeek()));
        editWpYInput.setText(String.valueOf(((PTE)tempEmp).getWeeksPerYear()));
        grossIncDisplay.setText(String.valueOf(((PTE)tempEmp).calcAnnualGrossIncome()));
        netIncDisplay.setText(String.valueOf(Math.round(((PTE)tempEmp).calcAnnualNetIncome() * 100.0 ) / 100.0));

        editYSLabel.setEnabled(false);
        editYSInput.setEnabled(false);
        editHWLabel.setEnabled(true);
        editHWInput.setEnabled(true);
        editHpWLabel.setEnabled(true);
        editHpWInput.setEnabled(true);
        editWpYLabel.setEnabled(true);
        editWpYInput.setEnabled(true);
        if (grossIncDisplay.isEnabled() == false){
            grossIncLabel.setEnabled(true);
            grossIncDisplay.setEnabled(true);
            netIncLabel.setEnabled(true);
            netIncDisplay.setEnabled(true);
        }
    }
   }
else{
    editEmpNumInput.setText("");
    editFNInput.setText("");
    editLNInput.setText("");
    editGenderButtonGroup.clearSelection();
    editWLDropDown.setSelectedIndex(0);
    editDRInput.setText("");
    workStatusButtonGroup.clearSelection();

    editYSInput.setText("");
    editHWInput.setText("");
    editHpWInput.setText("");
    editWpYInput.setText("");
    grossIncDisplay.setText("");
    netIncDisplay.setText("");

    editYSLabel.setEnabled(false);
    editYSInput.setEnabled(false);
    editHWLabel.setEnabled(false);
    editHWInput.setEnabled(false);
    editHpWLabel.setEnabled(false);
    editHpWInput.setEnabled(false);
    editWpYLabel.setEnabled(false);
    editWpYInput.setEnabled(false);
    grossIncLabel.setEnabled(false);
    grossIncDisplay.setEnabled(false);
    netIncLabel.setEnabled(false);
    netIncDisplay.setEnabled(false);
}
    }//GEN-LAST:event_mainTableMouseClicked

    private void saveChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveChangesButtonActionPerformed
empSearchInvalidText.setForeground(background);
empNumWarning.setForeground(background);
fNWarning.setForeground(background);
lNWarning.setForeground(background);
genderWarning.setForeground(background);
wLWarning.setForeground(background);
dRWarning.setForeground(background);
wSWarning.setForeground(background);
hWWarning.setForeground(background);
hpWWarning.setForeground(background);
wpYWarning.setForeground(background);
ySWarning.setForeground(background);

        
ArrayList<Object> fieldsFilled = new ArrayList<Object>();
fieldsFilled.add(editEmpNumInput.getText());
fieldsFilled.add(editFNInput.getText());
fieldsFilled.add(editLNInput.getText());
if (editGenderMButton.isSelected()){
    fieldsFilled.add(0);
}
else{
    if (editGenderFButton.isSelected()){
        fieldsFilled.add(1);
    }
    else{
        if (editGenderOtherButton.isSelected()){
            fieldsFilled.add(2);
        }
        else{
            fieldsFilled.add("");
        }
    }
}
if (editWLDropDown.getSelectedIndex() != 0) {
    fieldsFilled.add(editWLDropDown.getSelectedIndex());
}
else {
    fieldsFilled.add("");
}
fieldsFilled.add(editDRInput.getText());

if (editPTButton.isSelected()){
    fieldsFilled.add(1);
    fieldsFilled.add(editHWInput.getText());
    fieldsFilled.add(editHpWInput.getText());
    fieldsFilled.add(editWpYInput.getText());
}
else{
    if (editFTButton.isSelected()){
        fieldsFilled.add(1);
        if (editYSInput.getText().equals("")){
            fieldsFilled.add("");
            fieldsFilled.add("");
            fieldsFilled.add("");
        }
        else{
            fieldsFilled.add(1);
            fieldsFilled.add(1);
            fieldsFilled.add(1);
        }
    }
    else{
        fieldsFilled.add("");
        fieldsFilled.add("");
        fieldsFilled.add("");
        fieldsFilled.add("");
    }
}


Boolean allFieldsFilled = true;

for (int i = 0; i<10; i++){
    if (fieldsFilled.get(i).equals("")){
        allFieldsFilled = false;
    }
}
if (allFieldsFilled) {
    int selectedEmpRow = mainTable.getSelectedRow();
    int eN = Integer.valueOf(editEmpNumInput.getText());

    int n = mainTable.getRowCount()-1;
    for(int i=0; i<=n; i++){
        if (mainTable.getValueAt(i, 0) != null){
            if  (Integer.valueOf(String.valueOf(mainTable.getValueAt(i, 0))) == eN){
                for (int k = 0; k<4; k++){
                    mainTable.setValueAt(null, i, k);
                }
                empTable.removeFromTable(eN);
            }
        }
    }

    String fN = editFNInput.getText();
    String lN = editLNInput.getText();

    mainTable.setValueAt(eN, selectedEmpRow, 0);
    mainTable.setValueAt(fN, selectedEmpRow, 1);
    mainTable.setValueAt(lN, selectedEmpRow, 2);

    if(empTable.getFromTable(eN) != null){
            empTable.removeFromTable(eN);
        }

    int g = 2;
    if (editGenderMButton.isSelected()){
        g = 0;
    }
    if (editGenderFButton.isSelected()){
        g = 1;
    }
    int wL = editWLDropDown.getSelectedIndex();
    double dR = Double.valueOf(editDRInput.getText());

    if (editPTButton.isSelected()){
        double hW = Double.valueOf(editHWInput.getText());
        double hPW = Double.valueOf(editHpWInput.getText());
        double wPY = Double.valueOf(editWpYInput.getText());
        mainTable.setValueAt("Part Time", selectedEmpRow, 3);
        somePTE = new PTE(eN, fN, lN, g, wL, dR, hW, hPW, wPY);
        empTable.addToTable(somePTE);
        grossIncDisplay.setText(String.valueOf(((PTE)somePTE).calcAnnualGrossIncome()));
        netIncDisplay.setText(String.valueOf(Math.round(((PTE)somePTE).calcAnnualNetIncome() * 100.0 ) / 100.0));
    }
    else if (editFTButton.isSelected()){
        double yS = Double.valueOf(editYSInput.getText());
        mainTable.setValueAt("Full Time", selectedEmpRow, 3);
        someFTE = new FTE(eN, fN, lN, g, wL, dR, yS);
        empTable.addToTable(someFTE);
        grossIncDisplay.setText(String.valueOf(((FTE)someFTE).calcAnnualGrossIncome()));
        netIncDisplay.setText(String.valueOf(Math.round(((FTE)someFTE).calcAnnualNetIncome() * 100.0 ) / 100.0));
    }
    if (addingEmp){
        saveButton.setEnabled(true);
        loadButton.setEnabled(true);
        empSearchBox.setEnabled(true);
        empSearchButton.setEnabled(true);
        mainTable.setEnabled(true);
        addEmpButton.setEnabled(true);

        addingEmp = false;
    }
}
else {
    for (int i = 0; i<10; i++){
        if (fieldsFilled.get(i).equals("")){
            if (i==0){
                empNumWarning.setForeground(Color.red);
            }
            if (i==1){
                fNWarning.setForeground(Color.red);
            }
            if (i==2){
                lNWarning.setForeground(Color.red);                   
            }
            if (i==3){
                genderWarning.setForeground(Color.red);
            }
            if (i==4){
                wLWarning.setForeground(Color.red);
            }
            if (i==5){
                dRWarning.setForeground(Color.red);
            }
            if (i==6){
                wSWarning.setForeground(Color.red);
            }
            if (editPTButton.isSelected()){
                if (i==7){
                    hWWarning.setForeground(Color.red);
                }
                if (i==8){
                    hpWWarning.setForeground(Color.red);
                }
                if (i==9){
                    wpYWarning.setForeground(Color.red);
                }
            }
            if (editFTButton.isSelected()){
                if(i==7){
                    ySWarning.setForeground(Color.red);
                }
            }
        }
    }
}
    }//GEN-LAST:event_saveChangesButtonActionPerformed

    private void resetChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetChangesButtonActionPerformed
empSearchInvalidText.setForeground(background);
empNumWarning.setForeground(background);
fNWarning.setForeground(background);
lNWarning.setForeground(background);
genderWarning.setForeground(background);
wLWarning.setForeground(background);
dRWarning.setForeground(background);
wSWarning.setForeground(background);
hWWarning.setForeground(background);
hpWWarning.setForeground(background);
wpYWarning.setForeground(background);
ySWarning.setForeground(background);
        
int selectedEmpRow = mainTable.getSelectedRow();
int selectedEmpNum = -1;
EmployeeInfo tempEmp = null;

if (mainTable.getValueAt(selectedEmpRow, 0) != null){
selectedEmpNum = Integer.valueOf(String.valueOf(mainTable.getValueAt(selectedEmpRow, 0)));
tempEmp = empTable.getFromTable(selectedEmpNum);
}

if (tempEmp != null){
    editEmpNumInput.setText(String.valueOf(tempEmp.getEmpNumber()));
    editFNInput.setText(tempEmp.getFirstName());
    editLNInput.setText(tempEmp.getLastName());
    int tempEmpGender = tempEmp.getGender();
    if (tempEmpGender == 0){
        editGenderMButton.setSelected(true);
    }
    else{
        if (tempEmpGender == 1){
            editGenderFButton.setSelected(true);
        }
        else{
            editGenderOtherButton.setSelected(true);
        }
    }
    editWLDropDown.setSelectedIndex(tempEmp.getWorkLocation());
    editDRInput.setText(String.valueOf(tempEmp.getDeductionsRate()));

    if (tempEmp instanceof FTE){
        editFTButton.setSelected(true);

        editHWInput.setText("");
        editHpWInput.setText("");
        editWpYInput.setText("");
        editYSInput.setText(String.valueOf(((FTE)tempEmp).getYearlySalary()));
        grossIncDisplay.setText(String.valueOf(((FTE)tempEmp).calcAnnualGrossIncome()));
        netIncDisplay.setText(String.valueOf(Math.round(((FTE)tempEmp).calcAnnualNetIncome() * 100.0 ) / 100.0));

        editHWLabel.setEnabled(false);
        editHWInput.setEnabled(false);
        editHpWLabel.setEnabled(false);
        editHpWInput.setEnabled(false);
        editWpYLabel.setEnabled(false);
        editWpYInput.setEnabled(false);
        editYSLabel.setEnabled(true);
        editYSInput.setEnabled(true);
        if (grossIncLabel.isEnabled() == false){
            grossIncLabel.setEnabled(true);
            grossIncDisplay.setEnabled(true);
            netIncLabel.setEnabled(true);
            netIncDisplay.setEnabled(true);
    }
        }
    else if (tempEmp instanceof PTE){
        editPTButton.setSelected(true);

        editYSInput.setText("");
        editHWInput.setText(String.valueOf(((PTE)tempEmp).getHourlyWage()));
        editHpWInput.setText(String.valueOf(((PTE)tempEmp).getHoursPerWeek()));
        editWpYInput.setText(String.valueOf(((PTE)tempEmp).getWeeksPerYear()));
        grossIncDisplay.setText(String.valueOf(((PTE)tempEmp).calcAnnualGrossIncome()));
        netIncDisplay.setText(String.valueOf(Math.round(((PTE)tempEmp).calcAnnualNetIncome() * 100.0 ) / 100.0));

        editYSLabel.setEnabled(false);
        editYSInput.setEnabled(false);
        editHWLabel.setEnabled(true);
        editHWInput.setEnabled(true);
        editHpWLabel.setEnabled(true);
        editHpWInput.setEnabled(true);
        editWpYLabel.setEnabled(true);
        editWpYInput.setEnabled(true);
        if (grossIncDisplay.isEnabled() == false){
            grossIncLabel.setEnabled(true);
            grossIncDisplay.setEnabled(true);
            netIncLabel.setEnabled(true);
            netIncDisplay.setEnabled(true);
        }
    }
   }
else{
    editEmpNumInput.setText("");
    editFNInput.setText("");
    editLNInput.setText("");
    editGenderButtonGroup.clearSelection();
    editWLDropDown.setSelectedIndex(0);
    editDRInput.setText("");
    workStatusButtonGroup.clearSelection();

    editYSInput.setText("");
    editHWInput.setText("");
    editHpWInput.setText("");
    editWpYInput.setText("");
    grossIncDisplay.setText("");
    netIncDisplay.setText("");

    editYSLabel.setEnabled(false);
    editYSInput.setEnabled(false);
    editHWLabel.setEnabled(false);
    editHWInput.setEnabled(false);
    editHpWLabel.setEnabled(false);
    editHpWInput.setEnabled(false);
    editWpYLabel.setEnabled(false);
    editWpYInput.setEnabled(false);
    grossIncLabel.setEnabled(false);
    grossIncDisplay.setEnabled(false);
    netIncLabel.setEnabled(false);
    netIncDisplay.setEnabled(false);
}
    }//GEN-LAST:event_resetChangesButtonActionPerformed

    private void deleteEmpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEmpButtonActionPerformed
empSearchInvalidText.setForeground(background);
empNumWarning.setForeground(background);
fNWarning.setForeground(background);
lNWarning.setForeground(background);
genderWarning.setForeground(background);
wLWarning.setForeground(background);
dRWarning.setForeground(background);
wSWarning.setForeground(background);
hWWarning.setForeground(background);
hpWWarning.setForeground(background);
wpYWarning.setForeground(background);
ySWarning.setForeground(background);

int selectedEmpRow = mainTable.getSelectedRow();
if (mainTable.getValueAt(selectedEmpRow, 0) != null){
    empTable.removeFromTable(Integer.valueOf(editEmpNumInput.getText()));
}
DefaultTableModel mainTableModel = (DefaultTableModel) mainTable.getModel();
mainTableModel.removeRow(selectedEmpRow);

editEmpNumInput.setText("");
editFNInput.setText("");
editLNInput.setText("");
editGenderButtonGroup.clearSelection();
editWLDropDown.setSelectedIndex(0);
editDRInput.setText("");
workStatusButtonGroup.clearSelection();
editYSInput.setText("");
editHWInput.setText("");
editHpWInput.setText("");
editWpYInput.setText("");
grossIncDisplay.setText("");
netIncDisplay.setText("");

editBox.setEnabled(false);
editEmpNumLabel.setEnabled(false);
editEmpNumInput.setEnabled(false);
editFNLabel.setEnabled(false);
editFNInput.setEnabled(false);
editLNLabel.setEnabled(false);
editLNInput.setEnabled(false);
editGenderLabel.setEnabled(false);
editGenderMButton.setEnabled(false);
editGenderFButton.setEnabled(false);
editGenderOtherButton.setEnabled(false);
editWLLabel.setEnabled(false);
editWLDropDown.setEnabled(false);
editDRLabel.setEnabled(false);
editDRInput.setEnabled(false);
editPTButton.setEnabled(false);
editFTButton.setEnabled(false);
editYSLabel.setEnabled(false);
editYSInput.setEnabled(false);
editHWLabel.setEnabled(false);
editHWInput.setEnabled(false);
editHpWLabel.setEnabled(false);
editHpWInput.setEnabled(false);
editWpYLabel.setEnabled(false);
editWpYInput.setEnabled(false);
grossIncLabel.setEnabled(false);
grossIncDisplay.setEnabled(false);
netIncLabel.setEnabled(false);
netIncDisplay.setEnabled(false);

if (addingEmp){
    saveButton.setEnabled(true);
    loadButton.setEnabled(true);
    empSearchBox.setEnabled(true);
    empSearchButton.setEnabled(true);
    mainTable.setEnabled(true);
    addEmpButton.setEnabled(true);

    addingEmp = false;
}
    }//GEN-LAST:event_deleteEmpButtonActionPerformed

    private void empSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_empSearchButtonActionPerformed
if (empSearchBox.getText().equals("Search by Employee Number...")){
    empSearchInvalidText.setForeground(Color.red);
}
else{
    int searchNum = Integer.valueOf(empSearchBox.getText());
    if (empTable.getFromTable(searchNum) != null){
        int n = mainTable.getRowCount()-1;
        for(int i=0; i<=n; i++){
            if (mainTable.getValueAt(i, 0) != null){
                if (Integer.valueOf(String.valueOf(mainTable.getValueAt(i, 0))) == searchNum){
                    mainTable.setRowSelectionInterval(i, i);

                    EmployeeInfo selectedEmp = empTable.getFromTable(mainTable.getSelectedRow());
                    empSearchInvalidText.setForeground(background);

                    editBox.setEnabled(true);
                    editEmpNumLabel.setEnabled(true);
                    editEmpNumInput.setEnabled(true);
                    editFNLabel.setEnabled(true);
                    editFNInput.setEnabled(true);
                    editLNLabel.setEnabled(true);
                    editLNInput.setEnabled(true);
                    editGenderLabel.setEnabled(true);
                    editGenderMButton.setEnabled(true);
                    editGenderFButton.setEnabled(true);
                    editGenderOtherButton.setEnabled(true);
                    editWLLabel.setEnabled(true);
                    editWLDropDown.setEnabled(true);
                    editDRLabel.setEnabled(true);
                    editDRInput.setEnabled(true);
                    editPTButton.setEnabled(true);
                    editFTButton.setEnabled(true);

                    if (selectedEmp instanceof PTE){
                    editHWLabel.setEnabled(true);
                    editHWInput.setEnabled(true);
                    editHpWLabel.setEnabled(true);
                    editHpWInput.setEnabled(true);
                    editWpYLabel.setEnabled(true);
                    editWpYInput.setEnabled(true);
                    grossIncLabel.setEnabled(true);
                    grossIncDisplay.setEnabled(true);
                    netIncLabel.setEnabled(true);
                    netIncDisplay.setEnabled(true);
                    }
                    else if (selectedEmp instanceof FTE){
                    editYSLabel.setEnabled(true);
                    editYSInput.setEnabled(true);
                    grossIncLabel.setEnabled(true);
                    grossIncDisplay.setEnabled(true);
                    netIncLabel.setEnabled(true);
                    netIncDisplay.setEnabled(true);
                    }

                    int selectedEmpRow = mainTable.getSelectedRow();
                    int selectedEmpNum = -1;
                    EmployeeInfo tempEmp = null;

                    if (mainTable.getValueAt(selectedEmpRow, 0) != null){
                    selectedEmpNum = Integer.valueOf(String.valueOf(mainTable.getValueAt(selectedEmpRow, 0)));
                    tempEmp = empTable.getFromTable(selectedEmpNum);
                    }

                    if (tempEmp != null){
                        editEmpNumInput.setText(String.valueOf(tempEmp.getEmpNumber()));
                        editFNInput.setText(tempEmp.getFirstName());
                        editLNInput.setText(tempEmp.getLastName());
                        int tempEmpGender = tempEmp.getGender();
                        if (tempEmpGender == 0){
                            editGenderMButton.setSelected(true);
                        }
                        else{
                            if (tempEmpGender == 1){
                                editGenderFButton.setSelected(true);
                            }
                            else{
                                editGenderOtherButton.setSelected(true);
                            }
                        }
                        editWLDropDown.setSelectedIndex(tempEmp.getWorkLocation());
                        editDRInput.setText(String.valueOf(tempEmp.getDeductionsRate()));

                        if (tempEmp instanceof FTE){
                            editFTButton.setSelected(true);

                            editHWInput.setText("");
                            editHpWInput.setText("");
                            editWpYInput.setText("");
                            editYSInput.setText(String.valueOf(((FTE)tempEmp).getYearlySalary()));
                            grossIncDisplay.setText(String.valueOf(((FTE)tempEmp).calcAnnualGrossIncome()));
                            netIncDisplay.setText(String.valueOf(Math.round(((FTE)tempEmp).calcAnnualNetIncome() * 100.0 ) / 100.0));

                            editHWLabel.setEnabled(false);
                            editHWInput.setEnabled(false);
                            editHpWLabel.setEnabled(false);
                            editHpWInput.setEnabled(false);
                            editWpYLabel.setEnabled(false);
                            editWpYInput.setEnabled(false);
                            editYSLabel.setEnabled(true);
                            editYSInput.setEnabled(true);
                            if (grossIncDisplay.isEnabled() == false){
                                grossIncLabel.setEnabled(true);
                                grossIncDisplay.setEnabled(true);
                                netIncLabel.setEnabled(true);
                                netIncDisplay.setEnabled(true);
                        }
                            }
                        else if (tempEmp instanceof PTE){
                            editPTButton.setSelected(true);

                            editYSInput.setText("");
                            editHWInput.setText(String.valueOf(((PTE)tempEmp).getHourlyWage()));
                            editHpWInput.setText(String.valueOf(((PTE)tempEmp).getHoursPerWeek()));
                            editWpYInput.setText(String.valueOf(((PTE)tempEmp).getWeeksPerYear()));
                            grossIncDisplay.setText(String.valueOf(((PTE)tempEmp).calcAnnualGrossIncome()));
                            netIncDisplay.setText(String.valueOf(Math.round(((PTE)tempEmp).calcAnnualNetIncome() * 100.0 ) / 100.0));

                            editYSLabel.setEnabled(false);
                            editYSInput.setEnabled(false);
                            editHWLabel.setEnabled(true);
                            editHWInput.setEnabled(true);
                            editHpWLabel.setEnabled(true);
                            editHpWInput.setEnabled(true);
                            editWpYLabel.setEnabled(true);
                            editWpYInput.setEnabled(true);
                            if (grossIncDisplay.isEnabled() == false){
                                grossIncLabel.setEnabled(true);
                                grossIncDisplay.setEnabled(true);
                                netIncLabel.setEnabled(true);
                                netIncDisplay.setEnabled(true);
                            }
                        }
                       }
                    else{
                        editEmpNumInput.setText("");
                        editFNInput.setText("");
                        editLNInput.setText("");
                        editGenderButtonGroup.clearSelection();
                        editWLDropDown.setSelectedIndex(0);
                        editDRInput.setText("");
                        workStatusButtonGroup.clearSelection();

                        editYSInput.setText("");
                        editHWInput.setText("");
                        editHpWInput.setText("");
                        editWpYInput.setText("");
                        grossIncDisplay.setText("");
                        netIncDisplay.setText("");

                        editYSLabel.setEnabled(false);
                        editYSInput.setEnabled(false);
                        editHWLabel.setEnabled(false);
                        editHWInput.setEnabled(false);
                        editHpWLabel.setEnabled(false);
                        editHpWInput.setEnabled(false);
                        editWpYLabel.setEnabled(false);
                        editWpYInput.setEnabled(false);
                        grossIncLabel.setEnabled(false);
                        grossIncDisplay.setEnabled(false);
                        netIncLabel.setEnabled(false);
                        netIncDisplay.setEnabled(false);
                    }
                }
            }
        }
    }
    else{
        empSearchInvalidText.setForeground(Color.red);
    }
}
    }//GEN-LAST:event_empSearchButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
try {
            FileWriter fileWriter = new FileWriter(saveFileName);
            BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
            
            
            int numInTable = mainTable.getRowCount();
            for (int i = 0; i<numInTable; i++){
                int tempEmpNum = Integer.valueOf(String.valueOf(mainTable.getValueAt(i, 0)));
                EmployeeInfo tempEmp = empTable.getFromTable(tempEmpNum);
                
                if (tempEmp instanceof FTE){
                    FTE tempFTE = (FTE) empTable.getFromTable(tempEmpNum);
                    bufferedWriter.write("FTE");
                    bufferedWriter.newLine();
                    bufferedWriter.write(String.valueOf(tempFTE.getYearlySalary()));
                }
                
                else {
                    PTE tempPTE = (PTE) empTable.getFromTable(tempEmpNum);
                    bufferedWriter.write("PTE");
                    bufferedWriter.newLine();
                    bufferedWriter.write(String.valueOf(tempPTE.getHourlyWage()));
                    bufferedWriter.newLine();
                    bufferedWriter.write(String.valueOf(tempPTE.getHoursPerWeek()));
                    bufferedWriter.newLine();
                    bufferedWriter.write(String.valueOf(tempPTE.getWeeksPerYear()));
                }
                
                bufferedWriter.newLine();  
                bufferedWriter.write(String.valueOf(tempEmp.getEmpNumber()));
                bufferedWriter.newLine();  
                bufferedWriter.write(tempEmp.getFirstName());
                bufferedWriter.newLine();  
                bufferedWriter.write(tempEmp.getLastName());
                bufferedWriter.newLine();  
                bufferedWriter.write(String.valueOf(tempEmp.getGender()));
                bufferedWriter.newLine();  
                bufferedWriter.write(String.valueOf(tempEmp.getWorkLocation()));
                bufferedWriter.newLine();  
                bufferedWriter.write(String.valueOf(tempEmp.getDeductionsRate()));
                bufferedWriter.newLine();    
                bufferedWriter.write("#");
                bufferedWriter.newLine(); 
            }
            bufferedWriter.close();
        }
        
        catch(IOException error){
            System.out.println("Error writing to file '"+ saveFileName + "'");
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
String line = null;
        try {
            FileReader fileReader = new FileReader(saveFileName);
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            DefaultTableModel mainTableModel = (DefaultTableModel) mainTable.getModel();
            mainTableModel.setRowCount(0);

            boolean notLoading = false;
            int attribCount = 0;
            
            int eN = -1;
            String fN = null;
            String lN = null;
            int g = -1;
            int wL = -1;
            double dR = -1;
            int wS = -1;
            double hW = -1;
            double hpW = -1;
            double wpY = -1;
            double yS = -1;
            
            while((line = bufferedReader.readLine()) != null) {
                if (line.equals("#")){
                    int rowCount = mainTableModel.getRowCount();
                    mainTableModel.setRowCount(rowCount+1);
                    mainTable.setValueAt(eN, rowCount, 0);
                    mainTable.setValueAt(fN, rowCount, 1);
                    mainTable.setValueAt(lN, rowCount, 2);
                    if (wS == 0){
                        mainTable.setValueAt("Full Time", rowCount, 3);
                        someFTE = new FTE (eN, fN, lN, g, wL, dR, yS);
                        empTable.addToTable(someFTE);
                        
                    }
                    else {
                        mainTable.setValueAt("Part Time", rowCount, 3);
                        somePTE = new PTE (eN, fN, lN, g, wL, dR, hW, hpW, wpY);
                        empTable.addToTable(somePTE);
                    }
                    notLoading = false;
                    attribCount = 0;
                }
                else if (notLoading == false){
                    if (line.equals("FTE")) {
                        wS = 0;
                    }
                    else if (line.equals("PTE")){
                        wS = 1;
                    }
                    
                    if (wS == 0){
                        switch (attribCount){
                            case 1:
                                yS = Double.valueOf(line);
                                break;
                            case 2:
                                eN = Integer.valueOf(line);
                                break;
                            case 3:
                                fN = line;
                                break;
                            case 4:
                                lN = line;
                                break;
                            case 5:
                                g = Integer.valueOf(line);
                                break;
                            case 6:
                                wL = Integer.valueOf(line);
                                break;
                            case 7:
                                dR = Double.valueOf(line);
                                notLoading = true;
                                break;
                        }
                    }
                    else if (wS == 1){
                        switch (attribCount){
                            case 1:
                                hW = Double.valueOf(line);
                                break;
                            case 2:
                                hpW = Double.valueOf(line);
                                break;
                            case 3:
                                wpY = Double.valueOf(line);
                                break;
                            case 4:
                                eN = Integer.valueOf(line);
                                break;
                            case 5:
                                fN = line;
                                break;
                            case 6:
                                lN = line;
                                break;
                            case 7:
                                g = Integer.valueOf(line);
                                break;
                            case 8:
                                wL = Integer.valueOf(line);
                                break;
                            case 9:
                                dR = Double.valueOf(line);
                                notLoading = true;
                                break;
                        }
                    }
                    attribCount++;
                }
                System.out.println(line);
            }
        }
        catch(FileNotFoundException error) {
            System.out.println("Unable to open file '" + saveFileName + "'");                
        }
        catch(IOException error) {
            System.out.println("Error reading file '" + saveFileName + "'");
        }
    }//GEN-LAST:event_loadButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HashTableJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HashTableJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HashTableJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HashTableJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HashTableJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addEmpButton;
    private javax.swing.JLabel dRWarning;
    private javax.swing.JButton deleteEmpButton;
    private javax.swing.JPanel editBox;
    private javax.swing.JLabel editBoxTitle;
    private javax.swing.JTextField editDRInput;
    private javax.swing.JLabel editDRLabel;
    private javax.swing.JTextField editEmpNumInput;
    private javax.swing.JLabel editEmpNumLabel;
    private javax.swing.JTextField editFNInput;
    private javax.swing.JLabel editFNLabel;
    private javax.swing.JRadioButton editFTButton;
    private javax.swing.ButtonGroup editGenderButtonGroup;
    private javax.swing.JRadioButton editGenderFButton;
    private javax.swing.JLabel editGenderLabel;
    private javax.swing.JRadioButton editGenderMButton;
    private javax.swing.JRadioButton editGenderOtherButton;
    private javax.swing.JTextField editHWInput;
    private javax.swing.JLabel editHWLabel;
    private javax.swing.JTextField editHpWInput;
    private javax.swing.JLabel editHpWLabel;
    private javax.swing.JTextField editLNInput;
    private javax.swing.JLabel editLNLabel;
    private javax.swing.JRadioButton editPTButton;
    private javax.swing.JComboBox<String> editWLDropDown;
    private javax.swing.JLabel editWLLabel;
    private javax.swing.JTextField editWpYInput;
    private javax.swing.JLabel editWpYLabel;
    private javax.swing.JTextField editYSInput;
    private javax.swing.JLabel editYSLabel;
    private javax.swing.JLabel empNumWarning;
    private javax.swing.JTextField empSearchBox;
    private javax.swing.JButton empSearchButton;
    private javax.swing.JLabel empSearchInvalidText;
    private javax.swing.JLabel fNWarning;
    private javax.swing.JLabel genderWarning;
    private javax.swing.JTextField grossIncDisplay;
    private javax.swing.JLabel grossIncLabel;
    private javax.swing.JLabel hWWarning;
    private javax.swing.JLabel hpWWarning;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lNWarning;
    private javax.swing.JButton loadButton;
    private javax.swing.JTable mainTable;
    private javax.swing.JTextField netIncDisplay;
    private javax.swing.JLabel netIncLabel;
    private javax.swing.JButton resetChangesButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton saveChangesButton;
    private javax.swing.JLabel wLWarning;
    private javax.swing.JLabel wSWarning;
    private javax.swing.ButtonGroup workStatusButtonGroup;
    private javax.swing.JLabel wpYWarning;
    private javax.swing.JLabel ySWarning;
    // End of variables declaration//GEN-END:variables
}
